﻿@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using System;
@using System.Collections.Generic;

@namespace Jigsaw

@inherits Panel

<style>

	.actionfeed {
		z-index: 100;
		width: 100%;
		height: 100%;
		/*border: 1px solid #c3c3c3;*/

		align-self: flex-end;

		flex-direction: column;
		flex-flow: column;
	}
		
	entry {
		opacity: 1;
		border-radius: 15px;
		background-color: rgba( black, 0.7 );
		width: 300px;
		height: 50px;

		right:5px;
		top:5px;
		padding: 15px;
		backdrop-filter: blur( 5px );

		color: black;
		font-family: Poppins;
		font-size: 16px;
		font-weight: 600;
		margin-top: 5px;
		margin-right: 5px;
		align-self: flex-end;
		/*align-content: center;*/
		align-items: center;

		transform: scale( 1 );	
	}

</style>

<root>

	<div class="actionfeed">
		@foreach(ActionEntry entry in Entries)
        {
			<entry style="background-color:@entry.color">@entry.message</entry>
		}
	</div>

</root>

@code {

	public IList<ActionEntry> Entries { get; set; }

	public async void AddActionEntry( string message )
	{
		ActionEntry e = new ActionEntry(message);
		Entries.Add(e);

		StateHasChanged();

		await Task.Delay(5000);

		Entries.Remove(e);
		StateHasChanged();
	}

	public class ActionEntry : Panel
	{
		public string color {get; set; }
		public string message { get; internal set; }
		public Image Icon { get; internal set; }

		public RealTimeSince TimeSinceBorn = 0;

		public ActionEntry(string message)
		{
			Icon = Add.Image();
			this.message = message;
			this.color = RandomColor();
		}

		public override void Tick()
		{
			base.Tick();

			if (TimeSinceBorn > 15)
			{
				Delete();
			}
		}

		private string RandomColor()
		{
			Random rand = new Random();
			string[] cols = { "#ffec7a", "#ffce3b", "#ffa158", "#fff598", "#ffd371" };

			return cols[rand.Next(0, cols.Length)];
		}
	}

}


